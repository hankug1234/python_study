{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "empty linked_list\n",
      "hankug kimduhan junsuha \n",
      "----------------\n",
      "hankug\n",
      "junsuha\n",
      "_________________\n",
      "hankug kimduhan hongkilldong junsuha \n",
      "_________________\n",
      "1 3 3 4 5 7 \n",
      "------------------\n",
      "3 3 5 \n",
      "1\n",
      "------------------\n",
      "1 2 3 3 4 5 7 \n",
      "------------------\n",
      "1 2 3 3 4 5 7 \n"
     ]
    }
   ],
   "source": [
    "class node:\n",
    "    def __init__(self,data=None):\n",
    "        self.data = data\n",
    "        self.node = None\n",
    "        self.pre_node = None\n",
    "        \n",
    "class linked_list:\n",
    "    def __init__(self):\n",
    "        self.head = node()\n",
    "        self.tail = self.head\n",
    "        self.__len = 0\n",
    "        \n",
    "    def sort(self,rule):\n",
    "        length = self.__len\n",
    "        sort_list = linked_list()\n",
    "        for i in range(0,length):\n",
    "            sort_list.sort_insert(self.get_data(i+1),rule)\n",
    "        while True:\n",
    "            data = self.pop()\n",
    "            if data is None:\n",
    "                break\n",
    "            del data    \n",
    "        self.head = sort_list.head\n",
    "        self.tail = sort_list.tail\n",
    "        self.__len = sort_list.len()\n",
    "        return True\n",
    "\n",
    "                \n",
    "        \n",
    "    def search_data(self,data,rule=lambda x,y: x==y):\n",
    "        head = self.head.node\n",
    "        i=1\n",
    "        while head:\n",
    "            if rule(head.data,data):\n",
    "                return i\n",
    "        return False     \n",
    "        \n",
    "    def len(self):\n",
    "        return self.__len\n",
    "    \n",
    "    def add(self,data):\n",
    "        n = node(data) \n",
    "        self.tail.node = n\n",
    "        n.pre_node = self.tail\n",
    "        self.tail = n\n",
    "        self.__len+=1\n",
    "        \n",
    "    def pop(self):\n",
    "        if self.__len == 0:\n",
    "            return None\n",
    "        curr = self.tail\n",
    "        curr.pre_node.node = curr.node\n",
    "        self.__len-=1\n",
    "        return curr\n",
    "        \n",
    "    def delete(self,index):\n",
    "        if self.__len < index:\n",
    "            raise IndexError\n",
    "            return False\n",
    "        head = self.head.node\n",
    "        for i in range(0,index-1):\n",
    "            head = head.node\n",
    "        if index == self.__len:\n",
    "            self.tail = head.pre_node\n",
    "            self.tail.node = None\n",
    "        else:\n",
    "            head.pre_node.node = head.node\n",
    "            head.node.pre_node = head.pre_node\n",
    "        self.__len-=1    \n",
    "        return True    \n",
    "            \n",
    "    \n",
    "    def sort_insert(self,data,rule=lambda x,y:True):\n",
    "        self.__len+=1\n",
    "        head = self.head\n",
    "        while head.node:\n",
    "            if rule(head.node.data,data):\n",
    "                n = node(data)\n",
    "                n.node = head.node\n",
    "                n.pre_node = head\n",
    "                head.node.pre_node = n\n",
    "                head.node = n\n",
    "                return True\n",
    "            head = head.node\n",
    "        n = node(data)   \n",
    "        self.tail.node = n\n",
    "        n.pre_node = self.tail\n",
    "        self.tail = n\n",
    "        return True\n",
    "                  \n",
    "    def get_data(self,n):\n",
    "        if self.__len < n:\n",
    "            raise IndexError\n",
    "            return None\n",
    "        else:\n",
    "            data = self.head.node\n",
    "            for i in range(0,n-1):\n",
    "                data = data.node\n",
    "            return data.data\n",
    "        \n",
    "    def __get_data_node(self,n):\n",
    "        if self._len<n:\n",
    "            raise IndexError\n",
    "            return None\n",
    "        else:\n",
    "            data = self.head.node\n",
    "            for i in range(0,n-1):\n",
    "                data = data.node\n",
    "            return data    \n",
    "        \n",
    "    def insert_data(self,index,data):\n",
    "        if index == self.__len+1:\n",
    "            self.add(data)\n",
    "        elif self.__len < index:\n",
    "            raise IndexError\n",
    "            return None\n",
    "        else:\n",
    "            head = self.head\n",
    "            for i in range(0,index):\n",
    "                head = head.node\n",
    "            insert = node(data)    \n",
    "            insert.node = head\n",
    "            insert.pre_node = head.pre_node\n",
    "            head.pre_node.node = insert\n",
    "            head.pre_node = insert\n",
    "            \n",
    "        self.__len+=1\n",
    "        return True\n",
    "        \n",
    "    def print_all_data(self):\n",
    "        if self.__len == 0:\n",
    "            print('empty linked_list')\n",
    "            return\n",
    "        data = self.head.node\n",
    "        while data:\n",
    "            print(data.data,end=\" \")\n",
    "            data = data.node\n",
    "        print()    \n",
    "            \n",
    "test = linked_list()\n",
    "test.print_all_data()\n",
    "test.add('hankug')\n",
    "test.add('kimduhan')\n",
    "test.add('junsuha')\n",
    "test.print_all_data()\n",
    "print(\"----------------\")\n",
    "print(test.get_data(1))\n",
    "print(test.get_data(3))\n",
    "print(\"_________________\")\n",
    "test.insert_data(3,'hongkilldong')\n",
    "test.print_all_data()\n",
    "print(\"_________________\")\n",
    "test2 = linked_list()\n",
    "a = lambda x,y:x>y\n",
    "test2.sort_insert(3,a)\n",
    "test2.sort_insert(5,a)\n",
    "test2.sort_insert(4,a)\n",
    "test2.sort_insert(3,a)\n",
    "test2.sort_insert(1,a)\n",
    "test2.sort_insert(7,a)\n",
    "test2.print_all_data()\n",
    "print(\"------------------\")\n",
    "test2.delete(1)\n",
    "test2.delete(3)\n",
    "test2.delete(4)\n",
    "test2.print_all_data()\n",
    "print(test2.search_data(3))\n",
    "print(\"------------------\")\n",
    "test3 = linked_list()\n",
    "a = lambda x,y:x>y\n",
    "test3.add(3)\n",
    "test3.add(5)\n",
    "test3.add(4)\n",
    "test3.add(3)\n",
    "test3.add(1)\n",
    "test3.add(7)\n",
    "test3.add(2)\n",
    "test3.sort(a)\n",
    "test3.print_all_data()\n",
    "print(\"------------------\")\n",
    "test3 = linked_list()\n",
    "a = lambda x,y:x>y\n",
    "test3.sort_insert(3,a)\n",
    "test3.sort_insert(5,a)\n",
    "test3.sort_insert(4,a)\n",
    "test3.sort_insert(3,a)\n",
    "test3.sort_insert(1,a)\n",
    "test3.sort_insert(7,a)\n",
    "test3.sort_insert(2,a)\n",
    "test3.print_all_data()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
