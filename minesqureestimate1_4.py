# -*- coding: utf-8 -*-
"""mineSqureEstimate1-4

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z-AhoeWLMB80LB-FyHwbjbHrovQAWuX5
"""

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
import numpy as np

x = np.array([2,4,6,8])
y = np.array([81,93,91,97])

print(np.ones(10))

mx = x.mean()
my = y.mean()

devisor = [i-mx for i in x]

devisor = list(map(lambda x:x**2,devisor))

devisor

def top(x, mx, y, my):
  d = 0
  for i in range(0,len(x)):
    d += (x[i]-mx)*(y[i]-my)
  return d
devided = top(x,mx,y,my)

print(f"devisor:{devisor}")
print(f"devided:{devided}")

a = devisor/devided

b = my - (mx*a)

print(f"gradient:{a}")
print(f"intercept:{b}")

fake_a = 3
fake_b = 76

def predict(x):
  return fake_a*x+fake_b

n = len(x)
def mse(y,predict_y):
  return (1/n)*sum((y-predict_y)**2)