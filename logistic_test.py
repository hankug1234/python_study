# -*- coding: utf-8 -*-
"""logistic_test

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18SETHKWLFbvE3tepbZ8OpKqVef0b4Lpr
"""

import pandas as pd
fish = pd.read_csv("https://raw.githubusercontent.com/rickiepark/hg-mldl/master/fish.csv")

fish.columns

fish_input = fish.loc[:,'Weight':'Width']
fish_target = fish['Species']

print(fish_input.shape)

from sklearn.model_selection import train_test_split
train_input, test_input, train_target, test_target = train_test_split(fish_input,fish_target,random_state=42)

from sklearn.preprocessing import StandardScaler
ss = StandardScaler()
ss.fit(train_input)
train_scaled = ss.transform(train_input)
test_scalsed = ss.transform(test_input)

from sklearn.linear_model import LogisticRegression
binary_target = train_target.map(lambda x: x if x == "Bream" else "other", na_action='ignore')

brame_target_indexs = (train_target == 'Bream') | (train_target == 'Whitefish')

bream_target = train_target[brame_target_indexs]
bream_input = train_scaled[brame_target_indexs]

bream_logistic  = LogisticRegression()
bream_logistic.fit(bream_input,bream_target)

logistic1 = LogisticRegression()
logistic2 = LogisticRegression()

logistic1.fit(train_scaled,binary_target)
logistic2.fit(train_scaled,train_target)

from ast import Name
from IPython.utils.tempdir import NamedFileInTemporaryDirectory

import pandas as pd
import numpy as np
print(pd.DataFrame(data = logistic1.predict_proba(train_scaled[:5]),columns=logistic1.classes_))
print(pd.DataFrame(data = logistic2.predict_proba(train_scaled[:5]), columns = logistic2.classes_ ))
print()
print("---1----")
print(pd.DataFrame(data = logistic1.coef_))
print()
print("---2----")
print(pd.DataFrame(data = logistic2.coef_))

coef_1 = logistic1.coef_
intersect_1 = logistic1.intercept_

coef_2 = logistic2.coef_
intersect_2 = logistic2.intercept_

e = lambda x,y,z: np.exp(np.sum(x*y)+z)

def proba2(d,x,z):
  return e(x,d,z)/(1+e(x,d,z))

def proba(num,d,x,z):
  e_list = []
  for i in range(0,len(x)):
    e_list.append(e(x[i],d,z[i]))
  e_list = np.array(e_list)
  return e_list[num]/(np.sum(e_list))  

white_fish_index = train_target == 'Smelt'
white_fish = train_scaled[white_fish_index]

mean = 0
for i in range(0,7):
  for j in range(0,100):
    mean += proba2(train_scaled[j],coef_2[i],intersect_2[i])
  print(f"------{i}-------")  
  print(f"mean:{mean/100}")
  mean = 0

for i in range(0,7):
  print(f"-------------{i}-------------")
  print((proba2(train_scaled[0],coef_2[i],intersect_2[i])/(1-proba2(train_scaled[0],coef_2[i],intersect_2[i]))))
  print(e(coef_2[i],train_scaled[0],intersect_2[i]))
  print(proba2(train_scaled[0],coef_2[i],intersect_2[i]))

print()
"""
classfy_list = []
for name in logistic2.classes_:
  if name == "Smelt":
    continue
  print(f"---------{name}------------")
  smelt_bream_index =  (train_target == 'Smelt') | (train_target == name)
  smelt_bream_input = train_scaled[smelt_bream_index]
  smelt_bream_target = train_target[smelt_bream_index]
  smelt_bream_classify = LogisticRegression(max_iter=1000000)
  smelt_bream_classify.fit(smelt_bream_input, smelt_bream_target)
  classfy_list.append(smelt_bream_classify)
  sb_coef = smelt_bream_classify.coef_
  sb_intercept = smelt_bream_classify.intercept_

  print()
  print("---3----")
  print(pd.DataFrame(data = smelt_bream_classify.coef_))

  for i in range(0,1):
    print(f"proba2:{proba2(train_scaled[i],coef_2[0],intersect_2[0])} target:{train_target[train_target.index[i]]}")
    print(f"sb_proba:{proba2(train_scaled[i],sb_coef[0],sb_intercept[0])} target:{train_target[train_target.index[i]]}")
    print()
"""

three_class_input_index = (train_target == 'Bream') | (train_target == 'Parkki') | (train_target == 'Perch')
three_class_input = train_scaled[three_class_input_index]
three_class_target = train_target[three_class_input_index]

binary_bream_target = three_class_target.map(lambda x: x if x == 'Bream' else 'other')
binary_parkki_target = three_class_target.map(lambda x: x if x == 'Parkki' else 'other')

two_class_target1_index = (train_target == 'Bream') | (train_target == 'Perch')
two_class_target2_index = (train_target == 'Parkki') | (train_target == 'Perch')

two_class_input1 = train_scaled[two_class_target1_index]
two_class_input2 = train_scaled[two_class_target2_index]

two_class_target1 = train_target[two_class_target1_index]
two_class_target2 = train_target[two_class_target2_index]

logistic_bream = LogisticRegression()
logistic_parkki = LogisticRegression()

logistic_bream.fit(two_class_input1, two_class_target1)
logistic_parkki.fit(two_class_input2, two_class_target2)

logistic1 = LogisticRegression()

logistic2 = LogisticRegression()
logistic3 = LogisticRegression()

logistic1.fit(three_class_input,three_class_target)

logistic2.fit(three_class_input, binary_bream_target)
logistic3.fit(three_class_input, binary_parkki_target)

print(logistic_bream.classes_)
print(logistic_parkki.classes_)
print(logistic_parkki.coef_,logistic_parkki.intercept_)

import numpy as np
odds_bream = lambda x: logistic_bream.predict_proba(x)[0][0]/(1-logistic_bream.predict_proba(x)[0][0])
odds_parkki = lambda x:logistic_parkki.predict_proba(x)[0][0]/(1-logistic_parkki.predict_proba(x)[0][0])
p_bream = lambda x: odds_bream(x)/(1+odds_bream(x)+odds_parkki(x))
p_parkki = lambda x: odds_parkki(x)/(1+odds_bream(x)+odds_parkki(x))
p_perchi = lambda x: 1-p_bream(x)-p_parkki(x)

p_target = lambda x: logistic1.predict_proba(x)

print(three_class_target[0])
print(three_class_input[0])

input = [three_class_input[0]]
print(p_bream(input))
print(p_parkki(input))
print(p_perchi(input))
print(p_target(input))
print(logistic_bream.predict_proba(input)[0][0])
print(logistic_parkki.predict_proba(input)[0][0])

from sklearn.neighbors import KNeighborsClassifier
kn = KNeighborsClassifier(n_neighbors=3)
kn.fit(train_scaled,train_target)

import matplotlib.pyplot as plt
import numpy as np
z = np.arange(-5,5,0.1)
phi = 1/(1+np.exp(-z))
plt.plot(z,phi)
plt.xlabel("z")
plt.ylabel("phi")
plt.show()

tanh = np.tanh(z)
plt.plot(z,tanh)
plt.plot(z,phi)
plt.show()

bream_smelt_indexes = (train_target == 'Bream') | (train_target == 'Smelt')
train_bream_smelt = train_scaled[bream_smelt_indexes]
target_bream_smelt = train_target[bream_smelt_indexes]
print(target_bream_smelt)
print(train_bream_smelt)

from sklearn.linear_model import LogisticRegression
lr = LogisticRegression()
lr.fit(train_bream_smelt,target_bream_smelt)
print(lr.predict(train_bream_smelt[:5]))

print(lr.predict_proba(train_bream_smelt[:5]))

lr = LogisticRegression(C=20, max_iter=1000)
lr.fit(train_scaled, train_target)
print(lr.score(train_scaled, train_target))
print(lr.score(test_scalsed, test_target))

